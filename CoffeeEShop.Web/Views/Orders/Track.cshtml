@model CoffeeEShop.Domain.DomainModels.Order

@{
    ViewBag.Title = "Track My Order";
}

<h2 style="color:#3e2723; text-align:center; margin-bottom:20px;">
    🚚 Track Order #@Model.Id
</h2>

<div class="order-tracker">
    <ul class="progressbar">
        <li id="step-pending"><span class="icon">📝</span> Pending</li>
        <li id="step-preparing"><span class="icon">☕</span> Preparing</li>
        <li id="step-shipped"><span class="icon">📦</span> Shipped</li>
        <li id="step-delivered"><span class="icon">✅</span> Delivered</li>
    </ul>
</div>

<div class="order-info">
    <p><strong>Current Status:</strong> <span id="order-status">@Model.Status</span></p>
    <p><strong>Created At:</strong> @Model.CreatedAt.ToString("g")</p>
    <p><strong>Delivery Address:</strong> @Model.Address</p>
    <p><strong>Courier:</strong> John Doe (🚲 Bike Courier)</p>
</div>

<div style="text-align:center; margin-top:20px;">
    <form asp-controller="Orders" asp-action="CompleteOrder" method="post">
        <input type="hidden" name="id" value="@Model.Id" />
        <button type="submit" class="btn-done">✅ Mark as Done</button>
    </form>
</div>

<style>
    .order-tracker {
        margin: 30px auto;
        max-width: 700px;
    }

    .progressbar {
        counter-reset: step;
        display: flex;
        justify-content: space-between;
        list-style-type: none;
        padding: 0;
        position: relative;
    }

    .progressbar::before {
        content: "";
        position: absolute;
        top: 20px;
        left: 0;
        width: 100%;
        height: 4px;
        background-color: #ddd;
        z-index: 0;
    }

    .progressbar li {
        position: relative;
        flex: 1;
        text-align: center;
        font-weight: 600;
        color: #999;
        z-index: 1;
    }

    .progressbar li .icon {
        display: block;
        margin: 0 auto 8px auto;
        font-size: 1.5rem;
    }

    /* Default circle */
    .progressbar li:before {
        content: "";
        width: 28px;
        height: 28px;
        display: block;
        margin: 0 auto 8px auto;
        border-radius: 50%;
        border: 3px solid #ddd;
        background-color: #fff;
    }

    /* Completed steps */
    .progressbar li.completed {
        color: #27ae60;
    }
    .progressbar li.completed:before {
        border-color: #27ae60;
        background-color: #27ae60;
    }

    /* Current step */
    .progressbar li.current {
        color: #f39c12;
    }
    .progressbar li.current:before {
        border-color: #f39c12;
        background-color: #f39c12;
    }

    /* Progress line fill */
    .progressbar li.completed ~ li:before {
        border-color: #ddd;
        background-color: #fff;
    }

    .order-info {
        background: #fffaf3;
        border: 1px solid #d2b48c;
        border-radius: 12px;
        padding: 15px 20px;
        max-width: 600px;
        margin: 20px auto;
        color: #3e2723;
        font-size: 1rem;
        box-shadow: 0 3px 6px rgba(0,0,0,0.1);
    }
</style>

<script>
    const orderId = '@Model.Id';
    const pollInterval = 10000;

    async function fetchStatus() {
        try {
            const res = await fetch(`/api/orders/${orderId}`);
            if (!res.ok) return;
            const data = await res.json();
            document.getElementById('order-status').innerText = data.status;
            updateProgressBar(data.status);
        } catch (err) {
            console.error('Failed to fetch order status', err);
        }
    }

    function updateProgressBar(status) {
        const steps = ["Pending", "Preparing", "Shipped", "Delivered"];
        const normalized = status ? status.toLowerCase() : "";
        steps.forEach(step => {
            const id = `step-${step.toLowerCase()}`;
            const el = document.getElementById(id);
            if (el) {
                el.classList.remove("completed", "current");
            }
        });

        const index = steps.findIndex(s => s.toLowerCase() === normalized);

        if (index >= 0) {
            
            for (let i = 0; i < index; i++) {
                const el = document.getElementById(`step-${steps[i].toLowerCase()}`);
                if (el) el.classList.add("completed");
            }

           
            const currentEl = document.getElementById(`step-${steps[index].toLowerCase()}`);
            if (currentEl) currentEl.classList.add("current");
        }
    }

    // Poll every 10 seconds
    setInterval(fetchStatus, pollInterval);

    // Initial fetch
    fetchStatus();
</script>
